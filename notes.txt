How it works right now:

Server
    Socket setup and creation is currently handled
    server listens for messages on socket then receives them as objects:
        'header': [header],
        'data': [data]
    
    Core loop:
        Read all sockets into read_sockets and exception_sockets

        for each read_socket that is a notified_socket
            if it's a server socket (a new connection)
                accept it and add it to the client list
            if it's not (meaning it's a message from an existing connection)
                process the message using receive_message
                if the message is false
                    close the connection gracefully
                    drop the client from the client list
                else (if the message is anything other than disconnect)
                    get the client id by checking the client list for the socket
                    iterate over all clients
                        if the client isn't the sender, send them the message
                        and the sender

Client
    Create and set up sockets and client id
    send the client id to the server
    define function to handle receiving messages
    start a thread for the receiving function
    start waiting for user input to send messages to server

Current bugs: Live update works but has some output issues because it can
interrupt the input line from the main thread

Next steps:
    Allow users to start chatting with each other
    This means we need to:
        implement a way to track user modes
        implement a message/header(?) to start a chat
        implement receiving that message
        implement sending a message to two users to start a chat
        implement processing received messages based on user status